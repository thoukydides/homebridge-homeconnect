// Homebridge plugin for Home Connect home appliances
// Copyright Â© 2024-2025 Alexander Thoukydides

import path from 'node:path';
import { readdir, readFile, writeFile, stat } from 'node:fs/promises';

// Suffix added by ts-interface-builder
const TI_SUFFIX = '-ti.ts';

// Process command line arguments
const cmd = process.argv.slice(0, 2).map(p => path.basename(p)).join(' ');
const [ tiDirectory ] = process.argv.slice(2);
if (!tiDirectory) {
    console.error(`Usage: ${cmd} <ti-directory>`);
    process.exit(1);
}

// Process all of the *-ti.ts files in the specified directory
const tiFiles = await readdir(tiDirectory);
for (const tiFile of tiFiles) {
    if (!tiFile.endsWith(TI_SUFFIX)) continue;
    const tiBase = tiFile.slice(0, -TI_SUFFIX.length);
    const tiPath = path.join(tiDirectory, tiFile);
    const safePath = tiPath.replace(/-ti\.ts$/, '.ts');

    // Compare the file modification times
    const tiStat = await stat(tiPath);
    const safeStat = await stat(safePath).catch(() => null);
    if (safeStat && tiStat.mtimeMs <= safeStat.mtimeMs) continue;

    // Extract the members of the exportedTypeSuite
    const tiText = await readFile(tiPath, 'utf8');
    const typeSuite = /const exportedTypeSuite: t.ITypeSuite = {(.*),\s*};/s.exec(tiText);
    if (!typeSuite) {
        console.error(`Could not find "exportedTypeSuite" in ${tiPath}`);
        continue;
    }
    const typeSuiteMembers = typeSuite[1].split(',').map(l => l.trim());
    console.log(`${tiFile}: Found ${typeSuiteMembers.length} types`);

    // Generate a type-safe interface
    const safeText =
`// This module was automatically generated by ${cmd}
// ${new Date().toISOString()}

import { CheckerT, createCheckers, ICheckerSuite, ITypeSuite, TType } from 'ts-interface-checker';
import { ${typeSuiteMembers.join(', ') } } from '../${tiBase}.js';
import exportedTypeSuite from './${tiBase}-ti.js';

// Mapping of type names to types
export interface TypeMap {
${typeSuiteMembers.map(m => `    ${m}: ${m};`).join('\n')}
}

// Type definitions
export const typeSuite = exportedTypeSuite as ITypeSuite & {
${typeSuiteMembers.map(m => `    ${m}: TType;`).join('\n')}
};

// Checkers
export const checkers = createCheckers(exportedTypeSuite) as ICheckerSuite & {
${typeSuiteMembers.map(m => `    ${m}: CheckerT<${m}>;`).join('\n')}
};

// Export the checkers by default
export default checkers;
`;

    // Write the output file
    await writeFile(safePath, safeText);
}